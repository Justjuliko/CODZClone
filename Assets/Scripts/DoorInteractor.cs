using System.Collections;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.InputSystem;  // Required for Input System

public class DoorInteractor : MonoBehaviour
{
    [Header("=== Settings ===")]
    [Tooltip("The TMP_Text component to display interaction messages.")]
    public TMPro.TMP_Text interactionText;  // Text component for displaying interaction messages
    public string interactionMessage;

    [Header("=== Points Settings ===")]
    [Tooltip("Cost in points to perform the interaction.")]
    public int pointCost = 10;  // Configurable point cost in the inspector

    private bool isPlayerInRange = false;  // Flag to track if the player is in range

    // Reference to the InputAction of the input system
    private InputAction interactAction;

    Player player;

    [SerializeField] UnityEvent spawnEvent;  // Event to trigger when interaction happens

    [Header("=== Purchase Sound Settings ===")]
    [SerializeField] private AudioClip purchaseSound;  // Purchase sound clip
    private AudioSource purchaseAudioSource;  // AudioSource dedicated to the purchase sound

    private void Start()
    {
        player = GameObject.Find("FirstPersonController").GetComponent<Player>();  // Get reference to player script

        // Set up AudioSource for purchase sound
        purchaseAudioSource = gameObject.AddComponent<AudioSource>();
        purchaseAudioSource.clip = purchaseSound;
        purchaseAudioSource.playOnAwake = false;
    }

    private void OnEnable()
    {
        // Get the Player action map from the Input System and assign the Interact action
        var playerInputActions = new InputSystem_Actions();  // Make sure this class is generated by the Input System
        interactAction = playerInputActions.Player.Interact;  // "Player" is the action map, "Interact" is the action

        // Enable the action and subscribe to the 'performed' event
        interactAction.Enable();  // Enable the action
        interactAction.performed += OnInteractPerformed;  // Subscribe to the performed event
    }

    private void OnDisable()
    {
        // Disable the action and unsubscribe from the event
        interactAction.Disable();  // Disable the action when the object is disabled
        interactAction.performed -= OnInteractPerformed;  // Unsubscribe from the event when the object is disabled
    }

    private void OnTriggerEnter(Collider other)
    {
        // Check if the object entering the trigger is the player
        if (other.CompareTag("Player"))
        {
            isPlayerInRange = true;
            // Display interaction message
            if (interactionText != null)
            {
                interactionText.text = interactionMessage;  // Show interaction message
            }
        }
    }

    private void OnTriggerExit(Collider other)
    {
        // Check if the object exiting the trigger is the player
        if (other.CompareTag("Player"))
        {
            isPlayerInRange = false;
            // Clear interaction message
            if (interactionText != null)
            {
                interactionText.text = "";  // Clear the message when the player exits the trigger
            }
        }
    }

    // Method executed when the interact action is performed
    private void OnInteractPerformed(InputAction.CallbackContext context)
    {
        // Check if the player is in range and the action was performed
        if (isPlayerInRange)
        {
            // Get the Player script to check points
            if (player == null)
            {
                Debug.LogError("Player script not found.");
                return;  // If the player script is not found, exit the function
            }

            // Check if the player has enough points
            if (player.currentPoints >= pointCost)
            {
                // Deduct points for the cost
                player.RemovePoints(pointCost);

                // Play the purchase sound
                PlayPurchaseSound();

                // Trigger the spawn event
                spawnEvent.Invoke();

                // Temporarily disable the collider while the sound plays
                DisableCollidersTemporarily();

                // Clear interaction message before deactivating the object
                if (interactionText != null)
                {
                    interactionText.text = "";  // Clear the message
                }

                // Deactivate the object after the sound finishes
                StartCoroutine(DeactivateAfterSound());
            }
            else
            {
                // If not enough points, show a message
                Debug.Log("Not enough points to perform the action.");
            }
        }
    }

    private void PlayPurchaseSound()
    {
        if (purchaseSound != null && purchaseAudioSource != null)
        {
            purchaseAudioSource.volume = 1f;  // Ensure the volume is at maximum
            purchaseAudioSource.spatialBlend = 0f;  // This ensures the sound is 2D, not 3D
            purchaseAudioSource.Play();
        }
    }

    private void DisableCollidersTemporarily()
    {
        // Temporarily disable both BoxColliders
        Collider[] colliders = GetComponents<Collider>();
        foreach (var collider in colliders)
        {
            collider.enabled = false;
        }
    }

    private IEnumerator DeactivateAfterSound()
    {
        // Wait for the sound to finish
        yield return new WaitForSeconds(purchaseAudioSource.clip.length);

        // Reactivate the BoxColliders after the sound finishes
        Collider[] colliders = GetComponents<Collider>();
        foreach (var collider in colliders)
        {
            collider.enabled = true;
        }

        // Deactivate the object
        gameObject.SetActive(false);
    }
}
