using UnityEngine;
using UnityEngine.InputSystem;  // Necessary for the Input System

public class PlayerMovementAudio : MonoBehaviour
{
    [Header("=== Sound Settings ===")]
    [Tooltip("The sound played while the player is walking.")]
    public AudioClip walkSound;  // Walking sound clip

    [Tooltip("The sound played while the player is sprinting.")]
    public AudioClip sprintSound;  // Sprinting sound clip

    private AudioSource walkAudioSource;  // AudioSource for walking sound
    private AudioSource sprintAudioSource;  // AudioSource for sprinting sound

    private InputAction moveAction;  // Movement action
    private InputAction sprintAction;  // Sprint action

    private bool isSprinting = false;  // Indicator if the player is sprinting

    private void Start()
    {
        // Create and configure AudioSources for walking and sprinting
        walkAudioSource = gameObject.AddComponent<AudioSource>();
        walkAudioSource.clip = walkSound;
        walkAudioSource.loop = true;  // Looping sound
        walkAudioSource.playOnAwake = false;  // Don't play automatically on start

        sprintAudioSource = gameObject.AddComponent<AudioSource>();
        sprintAudioSource.clip = sprintSound;
        sprintAudioSource.loop = true;  // Looping sound
        sprintAudioSource.playOnAwake = false;  // Don't play automatically on start

        // Get the Input System actions
        var playerInputActions = new InputSystem_Actions(); // Ensure this class is generated by the Input System
        moveAction = playerInputActions.Player.Move;  // "Move" is the action for movement
        sprintAction = playerInputActions.Player.Sprint;  // "Sprint" is the action for sprinting

        // Subscribe to action events
        moveAction.performed += OnMovePerformed;
        moveAction.canceled += OnMoveCanceled;

        sprintAction.performed += OnSprintPerformed;
        sprintAction.canceled += OnSprintCanceled;

        // Enable the actions
        moveAction.Enable();
        sprintAction.Enable();
    }

    private void OnDisable()
    {
        // Disable actions and unsubscribe from events
        moveAction.Disable();
        sprintAction.Disable();

        moveAction.performed -= OnMovePerformed;
        moveAction.canceled -= OnMoveCanceled;

        sprintAction.performed -= OnSprintPerformed;
        sprintAction.canceled -= OnSprintCanceled;
    }

    private void OnMovePerformed(InputAction.CallbackContext context)
    {
        // If the player is moving and not sprinting, play the walking sound
        if (!isSprinting && !walkAudioSource.isPlaying)
        {
            walkAudioSource.Play();
        }
    }

    private void OnMoveCanceled(InputAction.CallbackContext context)
    {
        // If the player stops moving, stop the walking sound
        if (walkAudioSource.isPlaying)
        {
            walkAudioSource.Stop();
        }
    }

    private void OnSprintPerformed(InputAction.CallbackContext context)
    {
        // If the player is sprinting, stop the walking sound and play the sprinting sound
        if (!sprintAudioSource.isPlaying)
        {
            // Stop the walking sound if it's playing
            if (walkAudioSource.isPlaying)
            {
                walkAudioSource.Stop();
            }

            // Play the sprinting sound
            sprintAudioSource.Play();
            isSprinting = true;
        }
    }

    private void OnSprintCanceled(InputAction.CallbackContext context)
    {
        // If the player stops sprinting, stop the sprinting sound and play the walking sound if moving
        if (sprintAudioSource.isPlaying)
        {
            sprintAudioSource.Stop();
            isSprinting = false;
        }

        // Play the walking sound if the player is moving
        if (!walkAudioSource.isPlaying && moveAction.ReadValue<Vector2>().magnitude > 0)
        {
            walkAudioSource.Play();
        }
    }
}
