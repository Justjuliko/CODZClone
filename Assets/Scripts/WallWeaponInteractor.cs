using UnityEngine;
using UnityEngine.InputSystem;  // Required for Input System

public class WallWeaponInteractor : MonoBehaviour
{
    [Header("=== Settings ===")]
    [Tooltip("The integer value to pass to the 'OverwriteCurrentWeapon' function in the 'WeaponInventory' script.")]
    public int weaponIndex = 0;  // Integer to modify in the inspector

    [Tooltip("The TMP_Text component to display interaction messages.")]
    public TMPro.TMP_Text interactionText;  // Text component for displaying interaction messages
    public string defaultMessage = "";  // Default message when no interaction is available

    [Header("=== Points Settings ===")]
    [Tooltip("Cost in points to perform the interaction.")]
    public int pointCost = 10;  // Point cost configurable in the inspector

    private bool isPlayerInRange = false;  // Flag to track if the player is in range

    // Reference to the InputAction from the input system
    private InputAction interactAction;

    Player player;
    WeaponInventory weaponInventory;

    [Header("=== Purchase Sound Settings ===")]
    public AudioClip purchaseSound;  // Purchase sound clip
    private AudioSource purchaseAudioSource;  // AudioSource dedicated to purchase sound

    private void Start()
    {
        player = GameObject.Find("FirstPersonController").GetComponent<Player>();
        weaponInventory = GameObject.FindGameObjectWithTag("Player").GetComponent<WeaponInventory>();

        // Set up the AudioSource for the purchase sound
        purchaseAudioSource = gameObject.AddComponent<AudioSource>();
        purchaseAudioSource.clip = purchaseSound;
        purchaseAudioSource.playOnAwake = false;
    }

    private void OnEnable()
    {
        // Get the Player action map from the Input System and assign the Interact action
        var playerInputActions = new InputSystem_Actions();  // Ensure this class is generated by the Input System
        interactAction = playerInputActions.Player.Interact;  // "Player" is the action map, "Interact" is the action

        // Enable the action and subscribe to the performed event
        interactAction.Enable();  // Enable the action
        interactAction.performed += OnInteractPerformed;  // Subscribe to the performed event
    }

    private void OnDisable()
    {
        // Disable the action and unsubscribe from the event
        interactAction.Disable();  // Disable the action when the object is disabled
        interactAction.performed -= OnInteractPerformed;  // Unsubscribe from the event when the object is disabled
    }

    private void OnTriggerEnter(Collider other)
    {
        if (other.CompareTag("Player"))
        {
            isPlayerInRange = true;

            if (interactionText != null)
            {
                if (weaponInventory != null && player != null)
                {
                    int currentID = weaponInventory.GetCurrentWeaponID();

                    // If the player is holding the weapon at the wall, show ammo refill option
                    if (currentID == weaponIndex)
                    {
                        int refillCost = pointCost / 2;
                        if (player.currentPoints >= refillCost)
                        {
                            interactionText.text = "Hold F to buy ammo [cost: " + refillCost + "]";
                        }
                        else
                        {
                            interactionText.text = "Hold F to buy ammo [cost: " + refillCost + "]";
                        }
                    }
                    else
                    {
                        // If the player doesn't have the weapon, show weapon purchase option
                        if (player.currentPoints >= pointCost)
                        {
                            interactionText.text = "Hold F to buy weapon [cost: " + pointCost + "]";
                        }
                        else
                        {
                            interactionText.text = "Hold F to buy weapon [cost: " + pointCost + "]";
                        }
                    }
                }
            }
        }
    }

    private void OnTriggerExit(Collider other)
    {
        if (other.CompareTag("Player"))
        {
            isPlayerInRange = false;

            if (interactionText != null)
            {
                interactionText.text = defaultMessage;  // Restore the default message
            }
        }
    }

    private void OnInteractPerformed(InputAction.CallbackContext context)
    {
        if (isPlayerInRange)
        {
            if (player == null)
            {
                Debug.LogError("Player script not found.");
                return;
            }

            if (weaponInventory == null)
            {
                Debug.Log("Weapon inventory not found");
                return;
            }

            int currentID = weaponInventory.GetCurrentWeaponID();

            if (currentID == weaponIndex)
            {
                // If the player is already holding the weapon, offer ammo refill
                int refillCost = pointCost / 2;

                if (player.currentPoints >= refillCost)
                {
                    player.RemovePoints(refillCost);

                    PlayerShooting playerShooting = GameObject.Find("Weapons").GetComponent<PlayerShooting>();
                    if (playerShooting != null)
                    {
                        playerShooting.RefillAmmo();
                    }
                    else
                    {
                        Debug.LogWarning("PlayerShooting script not found");
                        return;
                    }

                    PlayPurchaseSound(); // Play the purchase sound
                    Debug.Log("Ammo refilled at half price.");
                }
                else
                {
                    Debug.Log("Not enough points to refill ammo.");
                }
            }
            else
            {
                // If the player doesn't have the weapon, offer weapon purchase
                if (player.currentPoints >= pointCost)
                {
                    player.RemovePoints(pointCost);
                    weaponInventory.OverwriteCurrentWeapon(weaponIndex);

                    PlayerShooting playerShooting = GameObject.Find("Weapons").GetComponent<PlayerShooting>();

                    PlayPurchaseSound(); // Play the purchase sound

                    if (interactionText != null)
                    {
                        interactionText.text = "";
                    }

                    Debug.Log("Weapon purchased.");
                }
                else
                {
                    Debug.Log("Not enough points to buy the weapon.");
                }
            }
        }
    }

    private void PlayPurchaseSound()
    {
        if (purchaseSound != null && purchaseAudioSource != null)
        {
            purchaseAudioSource.Play();
        }
    }
}
